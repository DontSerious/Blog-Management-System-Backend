// Code generated by Kitex v0.7.3. DO NOT EDIT.

package userservice

import (
	user "Bishe/be/kitex_gen/user"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser": kitex.NewMethodInfo(createUserHandler, newUserServiceCreateUserArgs, newUserServiceCreateUserResult, false),
		"CheckUser":  kitex.NewMethodInfo(checkUserHandler, newUserServiceCheckUserArgs, newUserServiceCheckUserResult, false),
		"ChangePWD":  kitex.NewMethodInfo(changePWDHandler, newUserServiceChangePWDArgs, newUserServiceChangePWDResult, false),
		"DelUser":    kitex.NewMethodInfo(delUserHandler, newUserServiceDelUserArgs, newUserServiceDelUserResult, false),
		"GetAllUser": kitex.NewMethodInfo(getAllUserHandler, newUserServiceGetAllUserArgs, newUserServiceGetAllUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `../../idl/user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCreateUserArgs)
	realResult := result.(*user.UserServiceCreateUserResult)
	success, err := handler.(user.UserService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCreateUserArgs() interface{} {
	return user.NewUserServiceCreateUserArgs()
}

func newUserServiceCreateUserResult() interface{} {
	return user.NewUserServiceCreateUserResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceCheckUserArgs)
	realResult := result.(*user.UserServiceCheckUserResult)
	success, err := handler.(user.UserService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceCheckUserArgs() interface{} {
	return user.NewUserServiceCheckUserArgs()
}

func newUserServiceCheckUserResult() interface{} {
	return user.NewUserServiceCheckUserResult()
}

func changePWDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceChangePWDArgs)
	realResult := result.(*user.UserServiceChangePWDResult)
	success, err := handler.(user.UserService).ChangePWD(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceChangePWDArgs() interface{} {
	return user.NewUserServiceChangePWDArgs()
}

func newUserServiceChangePWDResult() interface{} {
	return user.NewUserServiceChangePWDResult()
}

func delUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceDelUserArgs)
	realResult := result.(*user.UserServiceDelUserResult)
	success, err := handler.(user.UserService).DelUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceDelUserArgs() interface{} {
	return user.NewUserServiceDelUserArgs()
}

func newUserServiceDelUserResult() interface{} {
	return user.NewUserServiceDelUserResult()
}

func getAllUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*user.UserServiceGetAllUserResult)
	success, err := handler.(user.UserService).GetAllUser(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetAllUserArgs() interface{} {
	return user.NewUserServiceGetAllUserArgs()
}

func newUserServiceGetAllUserResult() interface{} {
	return user.NewUserServiceGetAllUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *user.CreateUserRequest) (r *user.CreateUserResponse, err error) {
	var _args user.UserServiceCreateUserArgs
	_args.Req = req
	var _result user.UserServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *user.CheckUserRequest) (r *user.CheckUserResponse, err error) {
	var _args user.UserServiceCheckUserArgs
	_args.Req = req
	var _result user.UserServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangePWD(ctx context.Context, req *user.ChangePWDRequest) (r *user.ChangePWDResponse, err error) {
	var _args user.UserServiceChangePWDArgs
	_args.Req = req
	var _result user.UserServiceChangePWDResult
	if err = p.c.Call(ctx, "ChangePWD", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelUser(ctx context.Context, req *user.DelUserRequest) (r *user.DelUserResponse, err error) {
	var _args user.UserServiceDelUserArgs
	_args.Req = req
	var _result user.UserServiceDelUserResult
	if err = p.c.Call(ctx, "DelUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllUser(ctx context.Context) (r *user.GetAllUserResponse, err error) {
	var _args user.UserServiceGetAllUserArgs
	var _result user.UserServiceGetAllUserResult
	if err = p.c.Call(ctx, "GetAllUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
