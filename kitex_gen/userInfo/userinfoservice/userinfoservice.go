// Code generated by Kitex v0.7.3. DO NOT EDIT.

package userinfoservice

import (
	userinfo "Bishe/be/kitex_gen/userInfo"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userInfoServiceServiceInfo
}

var userInfoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserInfoService"
	handlerType := (*userinfo.UserInfoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUserInfo": kitex.NewMethodInfo(getUserInfoHandler, newUserInfoServiceGetUserInfoArgs, newUserInfoServiceGetUserInfoResult, false),
		"SetUserInfo": kitex.NewMethodInfo(setUserInfoHandler, newUserInfoServiceSetUserInfoArgs, newUserInfoServiceSetUserInfoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "userinfo",
		"ServiceFilePath": `../../idl/userInfo.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userinfo.UserInfoServiceGetUserInfoArgs)
	realResult := result.(*userinfo.UserInfoServiceGetUserInfoResult)
	success, err := handler.(userinfo.UserInfoService).GetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserInfoServiceGetUserInfoArgs() interface{} {
	return userinfo.NewUserInfoServiceGetUserInfoArgs()
}

func newUserInfoServiceGetUserInfoResult() interface{} {
	return userinfo.NewUserInfoServiceGetUserInfoResult()
}

func setUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userinfo.UserInfoServiceSetUserInfoArgs)
	realResult := result.(*userinfo.UserInfoServiceSetUserInfoResult)
	success, err := handler.(userinfo.UserInfoService).SetUserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserInfoServiceSetUserInfoArgs() interface{} {
	return userinfo.NewUserInfoServiceSetUserInfoArgs()
}

func newUserInfoServiceSetUserInfoResult() interface{} {
	return userinfo.NewUserInfoServiceSetUserInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserInfo(ctx context.Context, req *userinfo.GetUserInfoRequest) (r *userinfo.GetUserInfoResponse, err error) {
	var _args userinfo.UserInfoServiceGetUserInfoArgs
	_args.Req = req
	var _result userinfo.UserInfoServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetUserInfo(ctx context.Context, req *userinfo.SetUserInfoRequest) (r *userinfo.SetUserInfoResponse, err error) {
	var _args userinfo.UserInfoServiceSetUserInfoArgs
	_args.Req = req
	var _result userinfo.UserInfoServiceSetUserInfoResult
	if err = p.c.Call(ctx, "SetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
