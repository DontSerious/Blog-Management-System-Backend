// Code generated by Kitex v0.7.3. DO NOT EDIT.

package editservice

import (
	edit "Bishe/be/kitex_gen/edit"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetDirTree(ctx context.Context, callOptions ...callopt.Option) (r *edit.GetDirTreeResponse, err error)
	GetFile(ctx context.Context, req *edit.GetFileRequest, callOptions ...callopt.Option) (r *edit.GetFileResponse, err error)
	CreateFile(ctx context.Context, req *edit.CreateFileRequest, callOptions ...callopt.Option) (r *edit.CreateFileResponse, err error)
	CreateDir(ctx context.Context, req *edit.CreateDirRequest, callOptions ...callopt.Option) (r *edit.CreateDirResponse, err error)
	SaveFile(ctx context.Context, req *edit.SaveFileRequest, callOptions ...callopt.Option) (r *edit.SaveFileResponse, err error)
	DelAll(ctx context.Context, req *edit.DelAllRequest, callOptions ...callopt.Option) (r *edit.DelAllResponse, err error)
	UploadFile(ctx context.Context, req *edit.UploadFileRequest, callOptions ...callopt.Option) (r *edit.UploadFileResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kEditServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kEditServiceClient struct {
	*kClient
}

func (p *kEditServiceClient) GetDirTree(ctx context.Context, callOptions ...callopt.Option) (r *edit.GetDirTreeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDirTree(ctx)
}

func (p *kEditServiceClient) GetFile(ctx context.Context, req *edit.GetFileRequest, callOptions ...callopt.Option) (r *edit.GetFileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFile(ctx, req)
}

func (p *kEditServiceClient) CreateFile(ctx context.Context, req *edit.CreateFileRequest, callOptions ...callopt.Option) (r *edit.CreateFileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateFile(ctx, req)
}

func (p *kEditServiceClient) CreateDir(ctx context.Context, req *edit.CreateDirRequest, callOptions ...callopt.Option) (r *edit.CreateDirResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateDir(ctx, req)
}

func (p *kEditServiceClient) SaveFile(ctx context.Context, req *edit.SaveFileRequest, callOptions ...callopt.Option) (r *edit.SaveFileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SaveFile(ctx, req)
}

func (p *kEditServiceClient) DelAll(ctx context.Context, req *edit.DelAllRequest, callOptions ...callopt.Option) (r *edit.DelAllResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DelAll(ctx, req)
}

func (p *kEditServiceClient) UploadFile(ctx context.Context, req *edit.UploadFileRequest, callOptions ...callopt.Option) (r *edit.UploadFileResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UploadFile(ctx, req)
}
