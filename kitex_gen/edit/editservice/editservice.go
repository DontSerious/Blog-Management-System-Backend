// Code generated by Kitex v0.7.3. DO NOT EDIT.

package editservice

import (
	"context"
	edit "github.com/DontSerious/Blog-Management-System-Backend/kitex_gen/edit"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return editServiceServiceInfo
}

var editServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "EditService"
	handlerType := (*edit.EditService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetDirTree": kitex.NewMethodInfo(getDirTreeHandler, newEditServiceGetDirTreeArgs, newEditServiceGetDirTreeResult, false),
		"GetFile":    kitex.NewMethodInfo(getFileHandler, newEditServiceGetFileArgs, newEditServiceGetFileResult, false),
		"CreateFile": kitex.NewMethodInfo(createFileHandler, newEditServiceCreateFileArgs, newEditServiceCreateFileResult, false),
		"CreateDir":  kitex.NewMethodInfo(createDirHandler, newEditServiceCreateDirArgs, newEditServiceCreateDirResult, false),
		"SaveFile":   kitex.NewMethodInfo(saveFileHandler, newEditServiceSaveFileArgs, newEditServiceSaveFileResult, false),
		"DelAll":     kitex.NewMethodInfo(delAllHandler, newEditServiceDelAllArgs, newEditServiceDelAllResult, false),
		"UploadFile": kitex.NewMethodInfo(uploadFileHandler, newEditServiceUploadFileArgs, newEditServiceUploadFileResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "edit",
		"ServiceFilePath": `../../idl/edit.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func getDirTreeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*edit.EditServiceGetDirTreeResult)
	success, err := handler.(edit.EditService).GetDirTree(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceGetDirTreeArgs() interface{} {
	return edit.NewEditServiceGetDirTreeArgs()
}

func newEditServiceGetDirTreeResult() interface{} {
	return edit.NewEditServiceGetDirTreeResult()
}

func getFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*edit.EditServiceGetFileArgs)
	realResult := result.(*edit.EditServiceGetFileResult)
	success, err := handler.(edit.EditService).GetFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceGetFileArgs() interface{} {
	return edit.NewEditServiceGetFileArgs()
}

func newEditServiceGetFileResult() interface{} {
	return edit.NewEditServiceGetFileResult()
}

func createFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*edit.EditServiceCreateFileArgs)
	realResult := result.(*edit.EditServiceCreateFileResult)
	success, err := handler.(edit.EditService).CreateFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceCreateFileArgs() interface{} {
	return edit.NewEditServiceCreateFileArgs()
}

func newEditServiceCreateFileResult() interface{} {
	return edit.NewEditServiceCreateFileResult()
}

func createDirHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*edit.EditServiceCreateDirArgs)
	realResult := result.(*edit.EditServiceCreateDirResult)
	success, err := handler.(edit.EditService).CreateDir(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceCreateDirArgs() interface{} {
	return edit.NewEditServiceCreateDirArgs()
}

func newEditServiceCreateDirResult() interface{} {
	return edit.NewEditServiceCreateDirResult()
}

func saveFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*edit.EditServiceSaveFileArgs)
	realResult := result.(*edit.EditServiceSaveFileResult)
	success, err := handler.(edit.EditService).SaveFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceSaveFileArgs() interface{} {
	return edit.NewEditServiceSaveFileArgs()
}

func newEditServiceSaveFileResult() interface{} {
	return edit.NewEditServiceSaveFileResult()
}

func delAllHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*edit.EditServiceDelAllArgs)
	realResult := result.(*edit.EditServiceDelAllResult)
	success, err := handler.(edit.EditService).DelAll(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceDelAllArgs() interface{} {
	return edit.NewEditServiceDelAllArgs()
}

func newEditServiceDelAllResult() interface{} {
	return edit.NewEditServiceDelAllResult()
}

func uploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*edit.EditServiceUploadFileArgs)
	realResult := result.(*edit.EditServiceUploadFileResult)
	success, err := handler.(edit.EditService).UploadFile(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEditServiceUploadFileArgs() interface{} {
	return edit.NewEditServiceUploadFileArgs()
}

func newEditServiceUploadFileResult() interface{} {
	return edit.NewEditServiceUploadFileResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetDirTree(ctx context.Context) (r *edit.GetDirTreeResponse, err error) {
	var _args edit.EditServiceGetDirTreeArgs
	var _result edit.EditServiceGetDirTreeResult
	if err = p.c.Call(ctx, "GetDirTree", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFile(ctx context.Context, req *edit.GetFileRequest) (r *edit.GetFileResponse, err error) {
	var _args edit.EditServiceGetFileArgs
	_args.Req = req
	var _result edit.EditServiceGetFileResult
	if err = p.c.Call(ctx, "GetFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFile(ctx context.Context, req *edit.CreateFileRequest) (r *edit.CreateFileResponse, err error) {
	var _args edit.EditServiceCreateFileArgs
	_args.Req = req
	var _result edit.EditServiceCreateFileResult
	if err = p.c.Call(ctx, "CreateFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateDir(ctx context.Context, req *edit.CreateDirRequest) (r *edit.CreateDirResponse, err error) {
	var _args edit.EditServiceCreateDirArgs
	_args.Req = req
	var _result edit.EditServiceCreateDirResult
	if err = p.c.Call(ctx, "CreateDir", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SaveFile(ctx context.Context, req *edit.SaveFileRequest) (r *edit.SaveFileResponse, err error) {
	var _args edit.EditServiceSaveFileArgs
	_args.Req = req
	var _result edit.EditServiceSaveFileResult
	if err = p.c.Call(ctx, "SaveFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DelAll(ctx context.Context, req *edit.DelAllRequest) (r *edit.DelAllResponse, err error) {
	var _args edit.EditServiceDelAllArgs
	_args.Req = req
	var _result edit.EditServiceDelAllResult
	if err = p.c.Call(ctx, "DelAll", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadFile(ctx context.Context, req *edit.UploadFileRequest) (r *edit.UploadFileResponse, err error) {
	var _args edit.EditServiceUploadFileArgs
	_args.Req = req
	var _result edit.EditServiceUploadFileResult
	if err = p.c.Call(ctx, "UploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
